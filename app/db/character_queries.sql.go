// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: character_queries.sql

package db

import (
	"context"
	"database/sql"
)

const deleteCharacterById = `-- name: DeleteCharacterById :exec
DELETE FROM character 
WHERE id = ?1
`

func (q *Queries) DeleteCharacterById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCharacterById, id)
	return err
}

const selectCharacterById = `-- name: SelectCharacterById :one

SELECT id, game, name, avatar_url, element, flags FROM character WHERE id = ?1 AND game = ?2 LIMIT 1
`

type SelectCharacterByIdParams struct {
	ID   int64
	Game int64
}

// character(
//
//	id INTEGER NOT NULL,
//	game INTEGER NOT NULL,
//	name TEXT NOT NULL,
//	avatar_url TEXT NOT NULL DEFAULT '',
//	element TEXT NOT NULL,
//	flags INT NOT NULL DEFAULT 0,
//	PRIMARY KEY(id, game)
//
// );
func (q *Queries) SelectCharacterById(ctx context.Context, arg SelectCharacterByIdParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, selectCharacterById, arg.ID, arg.Game)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Game,
		&i.Name,
		&i.AvatarUrl,
		&i.Element,
		&i.Flags,
	)
	return i, err
}

const selectCharactersByGame = `-- name: SelectCharactersByGame :many
SELECT id, game, name, avatar_url, element, flags FROM character WHERE game = ?1
`

func (q *Queries) SelectCharactersByGame(ctx context.Context, game int64) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, selectCharactersByGame, game)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Game,
			&i.Name,
			&i.AvatarUrl,
			&i.Element,
			&i.Flags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCharactersWithModsAndTags = `-- name: SelectCharactersWithModsAndTags :many
SELECT 
    c.id, c.game, c.name, c.avatar_url, c.element, c.flags,
    m.id, m.fname, m.game, m.char_name, m.char_id, m.selected, m.preview_images, m.gb_id, m.mod_link, m.gb_file_name, m.gb_download_link,
    t.mod_id, t.tag_name,
    tex.id, tex.mod_id, tex.fname, tex.selected, tex.preview_images, tex.gb_id, tex.mod_link, tex.gb_file_name, tex.gb_download_link
FROM character c
LEFT JOIN mod m ON (
    m.char_id = c.id AND m.game = c.game
) 
LEFT JOIN tag t ON t.mod_id = m.id
LEFT JOIN texture tex ON tex.mod_id = m.id
WHERE c.game = ?1 
AND (
        (
            m.fname LIKE '%' || ?2 || '%'
            OR c.name LIKE '%' || ?3 || '%'
            OR t.tag_name LIKE '%' || ?4 || '%'
        ) OR (
            ?2 IS NULL 
            AND ?3 IS NULL 
            AND ?4 IS NULL 
        )
    )
ORDER BY 
    c.name, m.fname, t.tag_name, tex.id
`

type SelectCharactersWithModsAndTagsParams struct {
	Game          int64
	ModFileName   sql.NullString
	CharacterName sql.NullString
	TagName       sql.NullString
}

type SelectCharactersWithModsAndTagsRow struct {
	ID               int64
	Game             int64
	Name             string
	AvatarUrl        string
	Element          string
	Flags            int64
	ID_2             sql.NullInt64
	Fname            sql.NullString
	Game_2           sql.NullInt64
	CharName         sql.NullString
	CharID           sql.NullInt64
	Selected         sql.NullBool
	PreviewImages    sql.NullString
	GbID             sql.NullInt64
	ModLink          sql.NullString
	GbFileName       sql.NullString
	GbDownloadLink   sql.NullString
	ModID            sql.NullInt64
	TagName          sql.NullString
	ID_3             sql.NullInt64
	ModID_2          sql.NullInt64
	Fname_2          sql.NullString
	Selected_2       sql.NullBool
	PreviewImages_2  sql.NullString
	GbID_2           sql.NullInt64
	ModLink_2        sql.NullString
	GbFileName_2     sql.NullString
	GbDownloadLink_2 sql.NullString
}

func (q *Queries) SelectCharactersWithModsAndTags(ctx context.Context, arg SelectCharactersWithModsAndTagsParams) ([]SelectCharactersWithModsAndTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectCharactersWithModsAndTags,
		arg.Game,
		arg.ModFileName,
		arg.CharacterName,
		arg.TagName,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectCharactersWithModsAndTagsRow
	for rows.Next() {
		var i SelectCharactersWithModsAndTagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Game,
			&i.Name,
			&i.AvatarUrl,
			&i.Element,
			&i.Flags,
			&i.ID_2,
			&i.Fname,
			&i.Game_2,
			&i.CharName,
			&i.CharID,
			&i.Selected,
			&i.PreviewImages,
			&i.GbID,
			&i.ModLink,
			&i.GbFileName,
			&i.GbDownloadLink,
			&i.ModID,
			&i.TagName,
			&i.ID_3,
			&i.ModID_2,
			&i.Fname_2,
			&i.Selected_2,
			&i.PreviewImages_2,
			&i.GbID_2,
			&i.ModLink_2,
			&i.GbFileName_2,
			&i.GbDownloadLink_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectClosestCharacter = `-- name: SelectClosestCharacter :one
SELECT id, game, name, avatar_url, element, flags FROM character WHERE LOWER(name) LIKE '%' || LOWER(?1) || '%' AND game = ?2 LIMIT 1
`

type SelectClosestCharacterParams struct {
	Name string
	Game int64
}

func (q *Queries) SelectClosestCharacter(ctx context.Context, arg SelectClosestCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, selectClosestCharacter, arg.Name, arg.Game)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Game,
		&i.Name,
		&i.AvatarUrl,
		&i.Element,
		&i.Flags,
	)
	return i, err
}

const selectClosestCharacterMatch = `-- name: SelectClosestCharacterMatch :one
SELECT id, game, name, avatar_url, element, flags FROM character WHERE LOWER(name) LIKE '%' || LOWER(?1) || '%' AND game = ?2 LIMIT 1
`

type SelectClosestCharacterMatchParams struct {
	Name string
	Game int64
}

func (q *Queries) SelectClosestCharacterMatch(ctx context.Context, arg SelectClosestCharacterMatchParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, selectClosestCharacterMatch, arg.Name, arg.Game)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Game,
		&i.Name,
		&i.AvatarUrl,
		&i.Element,
		&i.Flags,
	)
	return i, err
}
