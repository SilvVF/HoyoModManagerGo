// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const deleteUnusedMods = `-- name: DeleteUnusedMods :exec
DELETE FROM mod WHERE mod_filename NOT IN (/*SLICE:files*/?) AND game = ?2
`

type DeleteUnusedModsParams struct {
	Files []string
	Game  int64
}

func (q *Queries) DeleteUnusedMods(ctx context.Context, arg DeleteUnusedModsParams) error {
	query := deleteUnusedMods
	var queryParams []interface{}
	if len(arg.Files) > 0 {
		for _, v := range arg.Files {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:files*/?", strings.Repeat(",?", len(arg.Files))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:files*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Game)
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const insertMod = `-- name: InsertMod :exec
INSERT INTO mod (
    id, 
    mod_filename,
    game, 
    char_name, 
    char_id, 
    selected, 
    preview_images, 
    gb_id, mod_link, 
    gb_file_name, 
    gb_download_link
) VALUES(
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7,
    ?8,
    ?9,
    ?10,
    ?11
)
`

type InsertModParams struct {
	ID             int64
	ModFilename    string
	Game           int64
	CharName       string
	CharId         int64
	Selected       bool
	PreviewImages  string
	GbId           sql.NullInt64
	ModLink        sql.NullString
	GbFilename     sql.NullString
	GbDownloadLink sql.NullString
}

func (q *Queries) InsertMod(ctx context.Context, arg InsertModParams) error {
	_, err := q.db.ExecContext(ctx, insertMod,
		arg.ID,
		arg.ModFilename,
		arg.Game,
		arg.CharName,
		arg.CharId,
		arg.Selected,
		arg.PreviewImages,
		arg.GbId,
		arg.ModLink,
		arg.GbFilename,
		arg.GbDownloadLink,
	)
	return err
}

const selectCharacterById = `-- name: SelectCharacterById :one
SELECT id, game, name, avatar_url, element FROM character WHERE id = ?1 AND game = ?2 LIMIT 1
`

type SelectCharacterByIdParams struct {
	ID   int64
	Game int64
}

func (q *Queries) SelectCharacterById(ctx context.Context, arg SelectCharacterByIdParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, selectCharacterById, arg.ID, arg.Game)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Game,
		&i.Name,
		&i.AvatarUrl,
		&i.Element,
	)
	return i, err
}

const selectCharactersByGame = `-- name: SelectCharactersByGame :many
SELECT id, game, name, avatar_url, element FROM character WHERE character.game = ?1
`

func (q *Queries) SelectCharactersByGame(ctx context.Context, game int64) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, selectCharactersByGame, game)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Game,
			&i.Name,
			&i.AvatarUrl,
			&i.Element,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectCharactersWithModsAndTags = `-- name: SelectCharactersWithModsAndTags :many
SELECT 
    c.id, c.game, c.name, c.avatar_url, c.element,
    m.id, m.mod_filename, m.game, m.char_name, m.char_id, m.selected, m.preview_images, m.gb_id, m.mod_link, m.gb_file_name, m.gb_download_link,
    t.mod_id, t.tag_name
FROM 
    character c
    LEFT JOIN  mod m 
    ON m.char_id = c.id
    LEFT JOIN tag t 
    ON t.mod_id = m.id
    WHERE c.game = ?1 
    AND (
        (
            m.mod_filename LIKE '%' || ?2 || '%'
            OR c.name LIKE '%' || ?3 || '%'
            OR t.tag_name LIKE '%' || ?4 || '%'
        ) OR (
            ?2 is NULL AND ?3 is NULL AND ?4 is NULL 
        )
    )
ORDER BY c.name, m.mod_filename, t.tag_name
`

type SelectCharactersWithModsAndTagsParams struct {
	Game          int64
	ModFileName   sql.NullString
	CharacterName sql.NullString
	TagName       sql.NullString
}

type SelectCharactersWithModsAndTagsRow struct {
	ID             int64
	Game           int64
	Name           string
	AvatarUrl      string
	Element        string
	ID_2           sql.NullInt64
	ModFilename    sql.NullString
	Game_2         sql.NullInt64
	CharName       sql.NullString
	CharID         sql.NullInt64
	Selected       sql.NullBool
	PreviewImages  sql.NullString
	GbID           sql.NullInt64
	ModLink        sql.NullString
	GbFileName     sql.NullString
	GbDownloadLink sql.NullString
	ModID          sql.NullInt64
	TagName        sql.NullString
}

func (q *Queries) SelectCharactersWithModsAndTags(ctx context.Context, arg SelectCharactersWithModsAndTagsParams) ([]SelectCharactersWithModsAndTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectCharactersWithModsAndTags,
		arg.Game,
		arg.ModFileName,
		arg.CharacterName,
		arg.TagName,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectCharactersWithModsAndTagsRow
	for rows.Next() {
		var i SelectCharactersWithModsAndTagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Game,
			&i.Name,
			&i.AvatarUrl,
			&i.Element,
			&i.ID_2,
			&i.ModFilename,
			&i.Game_2,
			&i.CharName,
			&i.CharID,
			&i.Selected,
			&i.PreviewImages,
			&i.GbID,
			&i.ModLink,
			&i.GbFileName,
			&i.GbDownloadLink,
			&i.ModID,
			&i.TagName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectClosestCharacter = `-- name: SelectClosestCharacter :one
SELECT id, game, name, avatar_url, element FROM character WHERE LOWER(name) LIKE '%' || LOWER(?1) || '%' AND game = ?2 LIMIT 1
`

type SelectClosestCharacterParams struct {
	Name string
	Game int64
}

func (q *Queries) SelectClosestCharacter(ctx context.Context, arg SelectClosestCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, selectClosestCharacter, arg.Name, arg.Game)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Game,
		&i.Name,
		&i.AvatarUrl,
		&i.Element,
	)
	return i, err
}

const upsertCharacter = `-- name: UpsertCharacter :exec
INSERT OR IGNORE INTO character(id, game, name, avatar_url, element) 
VALUES(?, ?, ?, ?, ?)
`

type UpsertCharacterParams struct {
	ID        int64
	Game      int64
	Name      string
	AvatarUrl string
	Element   string
}

func (q *Queries) UpsertCharacter(ctx context.Context, arg UpsertCharacterParams) error {
	_, err := q.db.ExecContext(ctx, upsertCharacter,
		arg.ID,
		arg.Game,
		arg.Name,
		arg.AvatarUrl,
		arg.Element,
	)
	return err
}
