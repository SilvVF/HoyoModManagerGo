// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ini_cache_queries.sql

package db

import (
	"context"
)

const insertOrUpdateEntry = `-- name: InsertOrUpdateEntry :exec
INSERT INTO inicache(mod_id, fname)
VALUES (?1, ?2)
ON CONFLICT(mod_id) DO UPDATE SET
  fname = excluded.fname
`

type InsertOrUpdateEntryParams struct {
	ModId int64
	FName string
}

func (q *Queries) InsertOrUpdateEntry(ctx context.Context, arg InsertOrUpdateEntryParams) error {
	_, err := q.db.ExecContext(ctx, insertOrUpdateEntry, arg.ModId, arg.FName)
	return err
}

const selectIniCacheByModId = `-- name: SelectIniCacheByModId :one

SELECT mod_id, fname FROM inicache WHERE mod_id = ?1
`

// CREATE TABLE IF NOT EXISTS inicache (
//
//	mod_id INTEGER PRIMARY KEY NOT NULL,
//	fname TEXT NOT NULL,
//	FOREIGN KEY (mod_id) REFERENCES mod(id) ON DELETE CASCADE
//
// );
func (q *Queries) SelectIniCacheByModId(ctx context.Context, modid int64) (Inicache, error) {
	row := q.db.QueryRowContext(ctx, selectIniCacheByModId, modid)
	var i Inicache
	err := row.Scan(&i.ModID, &i.Fname)
	return i, err
}
