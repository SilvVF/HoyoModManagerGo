// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: texture_queries.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const deleteTextureById = `-- name: DeleteTextureById :exec
DELETE FROM texture WHERE texture.id = ?1
`

func (q *Queries) DeleteTextureById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTextureById, id)
	return err
}

const deleteUnusedTextures = `-- name: DeleteUnusedTextures :exec
DELETE FROM texture WHERE fname NOT IN /*SLICE:files*/? AND mod_id = ?2
`

type DeleteUnusedTexturesParams struct {
	Files []string
	ModId int64
}

func (q *Queries) DeleteUnusedTextures(ctx context.Context, arg DeleteUnusedTexturesParams) error {
	query := deleteUnusedTextures
	var queryParams []interface{}
	if len(arg.Files) > 0 {
		for _, v := range arg.Files {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:files*/?", strings.Repeat(",?", len(arg.Files))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:files*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.ModId)
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const insertTexture = `-- name: InsertTexture :one

INSERT INTO texture (
    mod_id,
    fname,
    selected, 
    preview_images, 
    gb_id, 
    mod_link, 
    gb_file_name, 
    gb_download_link
) VALUES(
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7,
    ?8
)
ON CONFLICT(fname, mod_id) DO NOTHING
RETURNING id
`

type InsertTextureParams struct {
	ModId          int64
	ModFilename    string
	Selected       bool
	PreviewImages  string
	GbId           sql.NullInt64
	ModLink        sql.NullString
	GbFilename     sql.NullString
	GbDownloadLink sql.NullString
}

// texture(
//
//	id INTEGER PRIMARY KEY NOT NULL,
//	mod_id INTEGER NOT NULL,
//	fname TEXT NOT NULL,
//	selected BOOLEAN NOT NULL DEFAULT FALSE,
//	preview_images TEXT NOT NULL DEFAULT '',
//	gb_id INTEGER,
//	mod_link TEXT,
//	gb_file_name TEXT,
//	gb_download_link TEXT,
//	UNIQUE(fname, mod_id),
//	FOREIGN KEY (mod_id) REFERENCES mod(id) ON DELETE CASCADE
//
// );
func (q *Queries) InsertTexture(ctx context.Context, arg InsertTextureParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertTexture,
		arg.ModId,
		arg.ModFilename,
		arg.Selected,
		arg.PreviewImages,
		arg.GbId,
		arg.ModLink,
		arg.GbFilename,
		arg.GbDownloadLink,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectEnabledTexturesByModId = `-- name: SelectEnabledTexturesByModId :many
SELECT id, mod_id, fname, selected, preview_images, gb_id, mod_link, gb_file_name, gb_download_link FROM texture WHERE (mod_id = ?1 AND selected)
`

func (q *Queries) SelectEnabledTexturesByModId(ctx context.Context, modid int64) ([]Texture, error) {
	rows, err := q.db.QueryContext(ctx, selectEnabledTexturesByModId, modid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Texture
	for rows.Next() {
		var i Texture
		if err := rows.Scan(
			&i.ID,
			&i.ModID,
			&i.Fname,
			&i.Selected,
			&i.PreviewImages,
			&i.GbID,
			&i.ModLink,
			&i.GbFileName,
			&i.GbDownloadLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTextureById = `-- name: SelectTextureById :one
SELECT id, mod_id, fname, selected, preview_images, gb_id, mod_link, gb_file_name, gb_download_link FROM texture WHERE texture.id = ?1 LIMIT 1
`

func (q *Queries) SelectTextureById(ctx context.Context, id int64) (Texture, error) {
	row := q.db.QueryRowContext(ctx, selectTextureById, id)
	var i Texture
	err := row.Scan(
		&i.ID,
		&i.ModID,
		&i.Fname,
		&i.Selected,
		&i.PreviewImages,
		&i.GbID,
		&i.ModLink,
		&i.GbFileName,
		&i.GbDownloadLink,
	)
	return i, err
}

const selectTexturesByModId = `-- name: SelectTexturesByModId :many
SELECT id, mod_id, fname, selected, preview_images, gb_id, mod_link, gb_file_name, gb_download_link FROM texture WHERE mod_id = ?1
`

func (q *Queries) SelectTexturesByModId(ctx context.Context, modid int64) ([]Texture, error) {
	rows, err := q.db.QueryContext(ctx, selectTexturesByModId, modid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Texture
	for rows.Next() {
		var i Texture
		if err := rows.Scan(
			&i.ID,
			&i.ModID,
			&i.Fname,
			&i.Selected,
			&i.PreviewImages,
			&i.GbID,
			&i.ModLink,
			&i.GbFileName,
			&i.GbDownloadLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTextureEnabledById = `-- name: UpdateTextureEnabledById :exec
UPDATE texture SET
    selected = ?1
WHERE texture.id = ?2
`

type UpdateTextureEnabledByIdParams struct {
	Selected bool
	ID       int64
}

func (q *Queries) UpdateTextureEnabledById(ctx context.Context, arg UpdateTextureEnabledByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateTextureEnabledById, arg.Selected, arg.ID)
	return err
}

const updateTextureNameById = `-- name: UpdateTextureNameById :exec
UPDATE texture SET
    fname = ?1
WHERE texture.id = ?2
`

type UpdateTextureNameByIdParams struct {
	Fname string
	ID    int64
}

func (q *Queries) UpdateTextureNameById(ctx context.Context, arg UpdateTextureNameByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateTextureNameById, arg.Fname, arg.ID)
	return err
}
